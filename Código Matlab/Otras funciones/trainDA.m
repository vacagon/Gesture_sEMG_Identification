function [trainedClassifier, validationAccuracy] = trainDA(trainingData)
inputTable = trainingData;
inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames,...
    {'Features'})), array2table(table2array(inputTable(:,{'Features'})),...
    'VariableNames', {'Features_1', 'Features_2', 'Features_3',...
    'Features_4', 'Features_5', 'Features_6', 'Features_7', 'Features_8',...
    'Features_9', 'Features_10', 'Features_11', 'Features_12'})];
predictorNames = {'Features_1', 'Features_2', 'Features_3',...
    'Features_4', 'Features_5', 'Features_6', 'Features_7',...
    'Features_8', 'Features_9', 'Features_10', 'Features_11', 'Features_12'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false,...
    false, false, false, false, false, false, false, false];
classificationDiscriminant = fitcdiscr(...
    predictors, ...
    response, ...
    'DiscrimType', 'quadratic', ...
    'FillCoeffs', 'off', ...
    'ClassNames', categorical({'1'; '2'; '3'; '4'; '5'}));
splitMatricesInTableFcn = @(t) [t(:,setdiff(t.Properties.VariableNames,...
    {'Features'})), array2table(table2array(t(:,{'Features'})),...
    'VariableNames', {'Features_1', 'Features_2', 'Features_3',...
    'Features_4', 'Features_5', 'Features_6', 'Features_7', 'Features_8',...
    'Features_9', 'Features_10', 'Features_11', 'Features_12'})];
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(splitMatricesInTableFcn(x));
discriminantPredictFcn = @(x) predict(classificationDiscriminant, x);
trainedClassifier.predictFcn = @(x) discriminantPredictFcn(predictorExtractionFcn(x));
trainedClassifier.RequiredVariables = {'Features'};
trainedClassifier.ClassificationDiscriminant = classificationDiscriminant;
inputTable = trainingData;
inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames,...
    {'Features'})), array2table(table2array(inputTable(:,{'Features'})),...
    'VariableNames', {'Features_1', 'Features_2', 'Features_3',...
    'Features_4', 'Features_5', 'Features_6', 'Features_7', 'Features_8',...
    'Features_9', 'Features_10', 'Features_11', 'Features_12'})];
predictorNames = {'Features_1', 'Features_2', 'Features_3', 'Features_4',...
    'Features_5', 'Features_6', 'Features_7', 'Features_8', 'Features_9',...
    'Features_10', 'Features_11', 'Features_12'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;
isCategoricalPredictor = [false, false, false, false, false, false,...
    false, false, false, false, false, false];
partitionedModel = crossval(trainedClassifier.ClassificationDiscriminant, 'KFold', 5);
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
